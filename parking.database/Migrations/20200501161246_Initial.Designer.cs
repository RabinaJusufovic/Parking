// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using parking.database.Models;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace parking.database.Migrations
{
    [DbContext(typeof(MyWebApiContext))]
    [Migration("20200501161246_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("MyWebApi.Models.Comments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("parkingRefId")
                        .HasColumnType("integer");

                    b.Property<int>("userRefId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("parkingRefId");

                    b.HasIndex("userRefId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MyWebApi.Models.Day", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("day")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Day");
                });

            modelBuilder.Entity("MyWebApi.Models.Favorite", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("parkingsRefId")
                        .HasColumnType("integer");

                    b.Property<int>("usersRefId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("parkingsRefId");

                    b.HasIndex("usersRefId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("MyWebApi.Models.Like", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("commentRefId")
                        .HasColumnType("integer");

                    b.Property<int>("counter")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("commentRefId");

                    b.ToTable("Like");
                });

            modelBuilder.Entity("MyWebApi.Models.Month", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("month")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Month");
                });

            modelBuilder.Entity("MyWebApi.Models.Parking", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("address")
                        .HasColumnType("text");

                    b.Property<bool>("availability")
                        .HasColumnType("boolean");

                    b.Property<long>("latitude")
                        .HasColumnType("bigint");

                    b.Property<long>("longitude")
                        .HasColumnType("bigint");

                    b.Property<int>("phone")
                        .HasColumnType("integer");

                    b.Property<int>("price")
                        .HasColumnType("integer");

                    b.Property<int>("rate")
                        .HasColumnType("integer");

                    b.Property<int>("workingHours")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Parking");
                });

            modelBuilder.Entity("MyWebApi.Models.Reserve", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("parkingId")
                        .HasColumnType("integer");

                    b.Property<int>("timeComing")
                        .HasColumnType("integer");

                    b.Property<int>("timeLeaving")
                        .HasColumnType("integer");

                    b.Property<int>("userId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("parkingId");

                    b.HasIndex("userId");

                    b.ToTable("Reserve");
                });

            modelBuilder.Entity("MyWebApi.Models.Role", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("role")
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("MyWebApi.Models.Subcomments", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int>("commentsRefId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("commentsRefId");

                    b.ToTable("Subcommnets");
                });

            modelBuilder.Entity("MyWebApi.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("dayRefId")
                        .HasColumnType("integer");

                    b.Property<string>("email")
                        .HasColumnType("text");

                    b.Property<string>("lastName")
                        .HasColumnType("text");

                    b.Property<int>("monthRefId")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .HasColumnType("text");

                    b.Property<int>("roleRefId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("signUpDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("yearRefId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("dayRefId");

                    b.HasIndex("monthRefId");

                    b.HasIndex("roleRefId");

                    b.HasIndex("yearRefId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MyWebApi.Models.Year", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.ToTable("Year");
                });

            modelBuilder.Entity("MyWebApi.Models.Comments", b =>
                {
                    b.HasOne("MyWebApi.Models.Parking", "Parking")
                        .WithMany("Comments")
                        .HasForeignKey("parkingRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("userRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Models.Favorite", b =>
                {
                    b.HasOne("MyWebApi.Models.Parking", "Parking")
                        .WithMany("Favorite")
                        .HasForeignKey("parkingsRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.User", "User")
                        .WithMany("Favorite")
                        .HasForeignKey("usersRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Models.Like", b =>
                {
                    b.HasOne("MyWebApi.Models.Comments", "Comments")
                        .WithMany("Like")
                        .HasForeignKey("commentRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Models.Reserve", b =>
                {
                    b.HasOne("MyWebApi.Models.Parking", "Parking")
                        .WithMany("Reserve")
                        .HasForeignKey("parkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.User", "User")
                        .WithMany("Reserve")
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Models.Subcomments", b =>
                {
                    b.HasOne("MyWebApi.Models.Comments", "Comments")
                        .WithMany("Subcomments")
                        .HasForeignKey("commentsRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MyWebApi.Models.User", b =>
                {
                    b.HasOne("MyWebApi.Models.Day", "Day")
                        .WithMany("User")
                        .HasForeignKey("dayRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.Month", "Month")
                        .WithMany("User")
                        .HasForeignKey("monthRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.Role", "Role")
                        .WithMany("User")
                        .HasForeignKey("roleRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MyWebApi.Models.Year", "Year")
                        .WithMany("User")
                        .HasForeignKey("yearRefId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
